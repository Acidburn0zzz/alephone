<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="Lua.xsl"?>
<!DOCTYPE document [
	  <!ELEMENT document (section*,triggers,tables,section*)>
	  <!ELEMENT triggers (description?,(function*))>
	  <!ATTLIST triggers id ID #REQUIRED>
	  <!ELEMENT tables (description*,(table|accessor|enum|enum-accessor)*)>
	  <!ATTLIST tables id ID #REQUIRED>

	  <!ELEMENT section (description?,(section*))>
	  <!ATTLIST section name CDATA #REQUIRED>
	  <!ATTLIST section id ID #REQUIRED>
	  
	  <!ELEMENT table ((description?),(function|function-variable|subtable|subtable-accessor|variable)*)>
	  <!ATTLIST table name ID #REQUIRED>
	  <!ATTLIST table singleton (true|false) 'false'>

	  <!ELEMENT subtable ((alias*),(description?),(length?),(index?),(call?),(function|subtable|variable|note)*)>
	  <!ATTLIST subtable name CDATA #REQUIRED>
	  <!ATTLIST subtable classname ID #REQUIRED>

	  <!ELEMENT subtable-accessor ((alias?),(description?),(function|subtable|variable)*)>
	  <!ATTLIST subtable-accessor name CDATA #REQUIRED>
	  <!ATTLIST subtable-accessor classname ID #REQUIRED>
	  <!ATTLIST subtable-accessor index CDATA #REQUIRED>

	  <!ELEMENT description ANY>
	  <!ELEMENT br EMPTY>
	  <!ELEMENT p ANY>
	  <!ELEMENT pre ANY>

	  <!ELEMENT function ((description?),(argument*),(return*),(note*))>
	  <!ATTLIST function name CDATA #REQUIRED>
	  <!ATTLIST function access (local-player|all) 'all'>
	  <!ATTLIST function return (single|variant) 'single'>

	  <!ELEMENT function-variable ((description?),(argument),(type))>
	  <!ATTLIST function-variable name CDATA #REQUIRED>
	  <!ATTLIST function-variable classname CDATA #IMPLIED>

	  <!ELEMENT argument (description?,type)>
	  <!ATTLIST argument name CDATA #REQUIRED>
	  <!ATTLIST argument required (true|false) 'true'>

	  <!ELEMENT return (type)>

	  <!ELEMENT variable ((alias*), (description?),(type),(note*))>
	  <!ATTLIST variable name CDATA #REQUIRED>
	  <!ATTLIST variable access (read-only|read-write|local-player|write-only) "read-write">

	  <!ELEMENT accessor ((description?),(length?),(index?),(call?),(function)*)>
	  <!ATTLIST accessor name ID #REQUIRED>
	  <!ATTLIST accessor contains IDREF #REQUIRED>

	  <!ELEMENT enum-accessor ((description?),(length?),(index?),(call?))>
	  <!ATTLIST enum-accessor name ID #REQUIRED>
	  <!ATTLIST enum-accessor contains IDREF #REQUIRED>
	  
	  <!ELEMENT enum ((description?),(function|function-variable|subtable|variable)*)>
	  <!ATTLIST enum name ID #REQUIRED>

	  <!ELEMENT length (description?)>
	  <!ELEMENT index ((description?),(type?))>
	  <!ELEMENT call (description?)>
	  <!ELEMENT type (#PCDATA)>
	  <!ELEMENT alias (#PCDATA)>
	  <!ELEMENT note (#PCDATA)>
	  ]>
<document>
  <section name="General" id="general">
    <section name="What is This?" id="what_is_this">
      <description>
	<p>This is a reference for writing Lua scripts to work in Aleph One. It lists every trigger and table available to Lua scripts. It is expected that Lua functionality will grow in Aleph One, and as it does, so will this document. Not everything here is completely documented, and any help fixing that would be appreciated.</p>
	<p>This is not a reference for Lua itself - see lua.org for that.</p>
      </description>
    </section>
    <section name="Running a Script" id="running_a_script">
      <description>
	<p>There are two ways to get a script to run - level specific MML, and selecting a script at the gather network game dialog. To use level specific MML, put the script in a TEXT resource in the map file. Then put in TEXT resource 128 MML telling A1 where to find the script, which in its most basic form is this:</p>
	<pre>
  &lt;marathon_levels&gt;
    &lt;level index="0"&gt;
      &lt;lua resource="1000"/&gt;
    &lt;/level&gt;
  &lt;/marathon_levels&gt;
	</pre>
	<p>By convention we use TEXT resource 1000+x to hold the script for level x, so the first level in the map file (which has level index 0) gets its script in TEXT resource 1000.</p>
	<p>This works fine for single player games. It will also work for multiplayer games, but only if every player has a copy of the map file and selects it in enviroment prefs.</p>
	<p>To use a script via the network game dialog, put then script in a text file. Then, at the gather network game dialog, select "use script", then select your script file.</p>
	<p>When playing network games, even if you are not gathering, it's important not to have a map file with level specific MML selected in your environment prefs, unless it's the map file for the map you are playing. A1 will run the script for that map file, your game will go out of sync, and you'll be unhappy.</p>
      </description>
    </section>
    <section name="Units" id="units">
      <description>
	<p>The unit for distance we use is World Units (WU) These are the same values you'd see in Forge or with F10 location display, and 1/1024 of what A1 uses internally and what you'd see in Pfhorte.</p>
	<p>Units for speed are . . . well let's say they're messy. :)</p>
      </description>
    </section>
    <section name="Local Player" id="local_player">
      <description>
	<p>A few variables are marked "local player." These variables will always do the right thing when written to, but when reading, will only return a useful result if the player they belong to is "local." In net games, there is a separate copy of each Lua script running on each player's computer, and the player is "local" only to his copy of the script.</p>
	<p>So, the only local player variables the script running on player 4's machine will be able to read from are the ones in Players[4]. For his script, the value of Players[1].zoom_active, for example, will return nil. If this confuses you, it might be better to avoid reading from any variable marked "local player."</p>
      </description>
    </section>
  </section>
  <triggers id="triggers">
    <description>These are functions scripts can define which Aleph One will call at specific times or events.</description>
    <function name="init">
      <description>at beginning of level</description>
      <argument name="restoring_game">
	<description>true if restoring from a saved game</description>
	<type>boolean</type>
      </argument>
    </function>
    <function name="cleanup">
      <description>at end of the level</description>
      <note>Primarily this is intended as a last chance for changing netgame scores before the postgame carnage report.</note>
    </function>
    <function name="idle">
      <description>at each tick, before physics and such</description>
    </function>
    <function name="postidle">
      <description>at each tick, after physics and such, but before rendering</description>
    </function>
    <function name="start_refuel">
      <description>whenever a player starts to use a refuel panel</description>
      <argument name="type"><type>number</type></argument>
      <argument name="player_index"><type>number</type></argument>
      <argument name="side_index"><type>number</type></argument>
    </function>
    <function name="end_refuel">
      <description>whenever a player stops using a refuel panel</description>
      <argument name="type"><type>number</type></argument>
      <argument name="player_index"><type>number</type></argument>
      <argument name="side_index"><type>number</type></argument>
    </function>
    <function name="tag_switch">
      <description>whenever a player uses a tag switch</description>
      <argument name="tag"><type>number</type></argument>
      <argument name="player"><type>number</type></argument>
      <note>Not called when a projectile (e.g., fists) toggles a tag switch</note>
    </function>
    <function name="light_switch">
      <description>whenever a player uses a light switch</description>
      <argument name="light"><type>number</type></argument>
      <argument name="player"><type>number</type></argument>
      <note>Not called when a projectile (e.g., fists) toggles a light switch</note>
    </function>
    <function name="platform_switch">
      <description>whenever a player uses a platform switch</description>
      <argument name="platform"><type>number</type></argument>
      <argument name="player"><type>number</type></argument>
      <note>Not called when a projectile (e.g., fists) toggles a platform switch</note>
    </function>
    <function name="terminal_enter">
      <description>whenever a player starts using a terminal</description>
      <argument name="terminal_id"><type>number</type></argument>
      <argument name="player"><type>number</type></argument>
    </function>
    <function name="terminal_exit">
      <description>whenever a player stops using a terminal</description>
      <argument name="terminal_id"><type>number</type></argument>
      <argument name="player"><type>player</type></argument>
    </function>
    <function name="pattern_buffer">
      <description>whenever a player uses a pattern buffer</description>
      <argument name="buffer_id"><type>number</type></argument>
      <argument name="player"><type>number</type></argument>
    </function>
    <function name="got_item">
      <description>whenever a player picks up an item</description>
      <argument name="type"><type>number</type></argument>
      <argument name="player"><type>number</type></argument>
      <note>Also whenever a player gets an item when a script calls .items.add()</note>
    </function>
    <function name="light_activated">
      <description>whenever a light is activated or deactivated</description>
      <argument name="index"><type>number</type></argument>
    </function>
    <function name="platform_activated">
      <description>whenever a platform is activated or deactivated</description>
      <argument name="index"><type>number</type></argument>
    </function>
    <function name="player_revived">
      <description>whenever a player revives (presumably only happens in a netgame)</description>
      <argument name="player"><type>number</type></argument>
    </function>
    <function name="player_killed">
      <description>whenever a player dies</description>
      <argument name="player"><type>number</type></argument>
      <argument name="aggressor_player">
	<description>the player who killed player, possibly himself (suicide), or -1 if killed by a non-player</description>
	<type>number</type></argument>
      <argument name="action">
	<description>there are no mnemonics for this at this time, making its use difficult</description>
	<type>number</type></argument>
      <argument name="projectile">
	<description>the projectile that delivered the final blow, or -1 if there is no such projectile</description>
	<type>number</type></argument>
    </function>
    <function name="player_damaged">
      <description>whenever a player has taken damage, but before he dies if applicable. The player's suit energy or oxygen may be negative when this trigger is called; if it still is when the trigger returns, it will be set to 0. The player's suit energy is tested again after this trigger returns, so a script may prevent a player's death
      </description>
      <argument name="victim_player_index">
	<description>-1 if the victim was damaged by a non-player</description>
	<type>number</type>
      </argument>
      <argument name="aggressor_player_index">
	<type>number</type>
      </argument>
      <argument name="aggressor_monster_index">
	<description>-1 if the victim was damaged by neither a player nor a monster</description>
	<type>number</type>
      </argument>
      <argument name="damage_type">
	<description>one of the Damage Types, e.g. _damage_fusion</description>
	<type>number</type>
      </argument>
      <argument name="damage_amount">
	<description>the amount recently subtracted from the player. If _damage_oxygen_drain, damage_amount was assessed against player's oxygen; else against player's suit energy</description>
	<type>number</type>
      </argument>
      <argument name="projectile">
	<description>the projectile that delivered the damage, or -1 if there is no such projectile</description>
	<type>number</type>
      </argument>
    </function>
    <function name="monster_killed">
      <description>whenever a monster dies</description>
      <argument name="monster"><type>number</type></argument>
      <argument name="aggressor_player">
	<description>player index of who killed it, or -1 if killed by non-player</description>
	<type>number</type>
      </argument>
      <argument name="projectile">
	<description>projectile that delivered the final blow, or -1 if there is no such projectile</description>
	<type>number</type>
      </argument>
      <note>This is called after a monster has taken lethal damage, but before it's removed form the monster list. You can use this to find out when a monster created with new_monster dies, but a monster discovered by select_monster may have already taken lethal damage, so you may need to check for that case when using select_monster.</note>
    </function>
    <function name="item_created">
      <description>whenever an item is created and placed on the ground (or floating) somewhere</description>
      <argument name="item_index"><type>number</type></argument>
      <note>Currently, this does not trigger on initial item placement because the initial item placement is done before Lua becomes initialised.</note>
    </function>
    <function name="projectile_detonated">
      <description>whenever a projectile detonates, after it has done any area of effect damage</description>
      <argument name="type"><type>number</type></argument>
      <argument name="owner"><type>number</type></argument>
      <argument name="polygon"><type>number</type></argument>
      <argument name="x"><type>number</type></argument>
      <argument name="y"><type>number</type></argument>
      <argument name="z"><type>number</type></argument>
    </function>
  </triggers>
  <tables id="tables">
    <description>These are tables (technically, userdata) defined in Aleph One which scripts can use to access objects in the game</description>
    <description>Each table also has a read-only .index variable that corresponds to the engine's index</description>
    <table name="annotation">
      <variable name="polygon">
	<description>polygon this annotation is associated with</description>
	<type>polygon</type>
	<note>can be nil</note>
	<note>an annotation is only shown when its polygon is visible on the overhead map</note>
      </variable>
      <variable name="text">
	<description>annotation text (64 characters max)</description>
	<type>string</type>
      </variable>
      <variable name="x">
	<type>WU</type>
      </variable>
      <variable name="y">
	<type>WU</type>
      </variable>
    </table>
    <table name="camera">
      <function name="activate">
	<description>activate camera for player</description>
	<argument name="player"><type>player</type></argument>
      </function>
      <function name="clear">
	<description>deletes all path points and angles</description>
      </function>
      <function name="deactivate">
	<description>deactivates camera</description>
      </function>
      <subtable name="path_angles" classname="lua_path_angles">
	<function name="new">
	  <description>adds a path angle</description>
	  <argument name="yaw"><type>angle</type></argument>
	  <argument name="pitch"><type>pitch</type></argument>
	  <argument name="time"><type>time</type></argument>
	</function>
      </subtable>
      <subtable name="path_points" classname="lua_path_points">
	<function name="new">
	  <description>adds a path point</description>
	  <argument name="x"><type>WU</type></argument>
	  <argument name="y"><type>WU</type></argument>
	  <argument name="z"><type>WU</type></argument>
	  <argument name="polygon"><type>polygon</type></argument>
	  <argument name="time"><type>time</type></argument>
	</function>
      </subtable>
    </table>
    <table name="game" singleton="true">
      <variable name="difficulty" access="read-only">
	<description>the difficulty level</description>
	<type>difficulty_type</type>
      </variable>
      <function name="global_random">
	<description>returns a random number between 0 and n-1 from Aleph One's original random number generator</description>
	<argument name="n"><type>number</type></argument>
	<return><type>number</type></return>
      </function>
      <variable name="kill_limit" access="read-only">
	<description>the game kill limit, or 0 if there is none</description>
	<type>number</type>
      </variable>
      <function name="local_random">
	<description>returns a random number between 0 and n-1 from Aleph One's original random number generator</description>
	<argument name="n"><type>number</type></argument>
	<return><type>number</type></return>
	<note>this is a good way to put net games out of sync</note>
      </function>
      <function name="random">
	<description>returns a random number between 0 and n-1 using a good random number generator</description>
	<argument name="n"><type>number</type></argument>
	<return><type>number</type></return>
      </function>
      <variable name="type" access="read-only">
	<description>whether the game is EMFH, KOTH, etc.</description>
	<type>game_type</type>
      </variable>
    </table>
    <table name="item">
      <function name="delete">
	<description>removes item from map</description>
      </function>
      <variable name="facing">
	<description>direction item is facing</description>
	<type>degrees</type>
      </variable>
      <variable name="polygon" access="read-only">
	<description>polygon the item is in</description>
	<type>polygon</type>
      </variable>
      <variable name="type" access="read-only">
	<description>type of item</description>
	<type>item_type</type>
      </variable>
      <variable name="x" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="y" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="z" access="read-only">
	<type>WU</type>
      </variable>
    </table>
    <table name="level" singleton="true">
      <subtable name="fog" classname="lua_fog">
	<alias>underwater_fog</alias>
	<variable name="active">
	  <alias>present</alias>
	  <description>whether fog is present</description>
	  <type>boolean</type>
	</variable>
	<variable name="affects_landscapes">
	  <description>whether fog affects landscapes</description>
	  <type>boolean</type>
	</variable>
	<subtable name="color" classname="lua_fog_color">
	  <note>values range from 0.0 to 1.0</note>
	  <variable name="r">
	    <description>red</description>
	    <type>number</type>
	  </variable>
	  <variable name="g">
	    <description>green</description>
	    <type>number</type>
	  </variable>
	  <variable name="b">
	    <description>blue</description>
	    <type>number</type>
	  </variable>
	</subtable>
	<variable name="depth">
	  <description>fog depth in WU</description>
	  <type>number</type>
	</variable>
      </subtable>
      <variable name="low_gravity" access="read-only">
	<description>whether level is low gravity</description>
	<type>boolean</type>
      </variable>
      <variable name="magnetic" access="read-only">
	<description>whether level is magnetic</description>
	<type>string</type>
      </variable>
      <variable name="name" access="read-only">
	<description>level name</description>
	<type>string</type>
      </variable>
      <variable name="rebellion" access="read-only">
	<description>whether level is rebellion</description>
	<type>boolean</type>
      </variable>
      <variable name="vacuum" access="read-only">
	<description>whether level is vacuum</description>
	<type>boolean</type>
      </variable>
    </table>
    <table name="light">
      <variable name="active">
	<description>whether light is active</description>
	<type>boolean</type>
      </variable>
    </table>
    <table name="line">
      <variable name="clockwise_polygon" access="read-only">
	<alias>cw_polygon</alias>
	<description>polygon on clockwise side of line</description>
	<type>polygon</type>
      </variable>
      <variable name="clockwise_side" access="read-only">
	<alias>cw_side</alias>
	<description>clockwise side of line</description>
	<type>side</type>
      </variable>
      <variable name="counterclockwise_polygon" access="read-only">
	<alias>ccw_polygon</alias>
	<description>polygon on counterclockwise side of line</description>
	<type>polygon</type>
      </variable>
      <variable name="counterclockwise_side" access="read-only">
	<alias>ccw_side</alias>
	<description>counterclockwise side of line</description>
	<type>side</type>
      </variable>
    </table>
    <table name="media">
      <variable name="type">
	<description>type of media</description>
	<type>media_type</type>
      </variable>
    </table>
    <table name="monster">
      <variable name="action" access="read-only">
	<description>current AI action of the monster</description>
	<type>number</type>
      </variable>
      <variable name="active">
	<description>whether monster has been activated</description>
	<type>boolean</type>
      </variable>
      <function name="attack">
	<description>instructs monster to attack target</description>
	<argument name="target"><type>monster</type></argument>
      </function>
      <function name="damage">
	<description>damages monster</description>
	<argument name="amount"><type>number</type></argument>
	<argument name="type" required="false"><type>damage_type</type></argument>
	<note>if no type is specified, fist damage is dealt</note>
      </function>
      <variable name="facing">
	<alias>yaw</alias>
	<description>direction the monster is facing</description>
	<type>degrees</type>
      </variable>
      <variable name="life">
	<alias>vitality</alias>
	<description>the monster's vitality</description>
	<type>number</type>
	<note>monsters that haven't spawned or teleported in yet don't have vitality</note>
      </variable>
      <variable name="mode" access="read-only">
	<description>current AI mode of the monster</description>
	<type>number</type>
      </variable>
      <function name="move_by_path">
	<description>instructs monster to move to polygon</description>
	<argument name="polygon"><type>polygon</type></argument>
	<note>monsters get distracted easily en route</note>
	<note>once it gets there, it probably won't choose to stay</note>
      </function>
      <variable name="player" access="read-only">
	<description>if monster is a player monster, the player; otherwise, nil</description>
	<type>player</type>
      </variable>
      <function name="position">
	<description>sets position of monster</description>
	<argument name="x">
	  <type>WU</type></argument>
	<argument name="y"><type>WU</type></argument>
	<argument name="z"><type>WU</type></argument>
	<argument name="polygon"><type>polygon</type></argument>
      </function>
      <variable name="type" access="read-only">
	<description>type of monster</description>
	<type>monster_type</type>
      </variable>
      <variable name="valid" access="read-only">
	<description>whether monster is still valid</description>
	<type>boolean</type>
      </variable>
      <variable name="visible" access="read-only">
	<description>whether monster is visible (e.g. has teleported in)</description>
	<type>boolean</type>
	<note>this has nothing to do with whether monsters are cloaked (like invisible S'pht) or not</note>
      </variable>
      <variable name="x" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="y" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="z" access="read-only">
	<type>WU</type>
      </variable>
    </table>
    <table name="music" singleton="true">
      <function name="clear">
	<description>clears the level playlist</description>
      </function>
      <function name="fade">
	<description>fades out the currently playing track and clears the playlist</description>
	<argument name="duration"><type>seconds</type></argument>
      </function>
      <function name="play">
	<description>appends all of the specified tracks to the end of the playlist</description>
	<argument name="track1"><type>string</type></argument>
	<argument name="track2" required="false"><type>string</type></argument>
	<argument name="..." required="false"><type>string</type></argument>
      </function>
      <function name="stop">
	<description>stops level music and clears the playlist</description>
      </function>
    </table>
    <table name="platform">
      <variable name="active">
	<description>whether platform is currently active</description>
	<type>boolean</type>
      </variable>
      <variable name="ceiling_height">
	<description>current ceiling height of platform</description>
	<type>WU</type>
      </variable>
      <variable name="contracting">
	<description>direction platform is moving or will move when active</description>
	<type>boolean</type>
      </variable>
      <variable name="extending">
	<description>direction platform is moving or will move when active</description>
	<type>boolean</type>
      </variable>
      <variable name="floor_height">
	<description>current floor height of platform</description>
	<type>WU</type>
      </variable>
      <variable name="monster_controllable">
	<description>whether platform can be controlled by monsters</description>
	<type>boolean</type>
      </variable>
      <variable name="player_controllable">
	<description>whether platform can be controlled by players</description>
	<type>boolean</type>
      </variable>
      <variable name="polygon" access="read-only">
	<description>polygon of this platform</description>
	<type>polygon</type>
      </variable>
      <variable name="speed">
	<description>platform speed</description>
	<type>speed</type>
      </variable>
    </table>
    <table name="player">
      <function name="accelerate">
	<description>accelerates player</description>
	<argument name="direction"><type>angle</type></argument>
	<argument name="velocity"><type>speed</type></argument>
	<argument name="vertical_velocity"><type>speed</type></argument>
      </function>
      <subtable name="action_flags" classname="lua_action_flags">
	<note>only valid when read/written in idle()</note>
	<note>disabled when the player is viewing a terminal</note>
	<note>latched action flags are only true the first tick the key is held down</note>
	<variable name="action_trigger">
	  <description>respawns, or activates platforms/doors/control panels</description>
	  <type>boolean</type>
	  <note>latched</note>
	</variable>
	<variable name="cycle_weapons_forward">
	  <description>switches to next weapon</description>
	  <type>boolean</type>
	  <note>latched</note>
	</variable>
	<variable name="cycle_weapons_backward">
	  <description>switches to previous weapon</description>
	  <type>boolean</type>
	  <note>latched</note>
	</variable>
	<variable name="left_trigger">
	  <description>fires primary trigger</description>
	  <type>boolean</type>
	</variable>
	<variable name="microphone_button">
	  <description>activates the net mic</description>
	  <type>boolean</type>
	  <note>can not be set to true; can be set to false</note>
	</variable>
	<variable name="right_trigger">
	  <description>fires secondary trigger</description>
	  <type>boolean</type>
	</variable>
	<variable name="toggle_map">
	  <description>toggles the overhead map</description>
	  <type>boolean</type>
	  <note>latched</note>
	</variable>
      </subtable>
      <function name="activate_terminal">
	<description>activates terminal</description>
	<argument name="terminal"><type>terminal</type></argument>
      </function>
      <variable name="color">
	<description>color of player (shirt color, if teams are enabled)</description>
	<type>number</type>
      </variable>
      <subtable name="compass" classname="player_compass">
	<function name="all_off">
	  <description>turns all compass quadrants off, disables beacon</description>
	</function>
	<function name="all_on">
	  <description>turns all compass quadrants on, disables beacon</description>
	</function>
	<variable name="beacon">
	  <description>whether to use the beacon</description>
	  <type>boolean</type>
	</variable>
	<variable name="lua">
	  <description>whether Lua is controlling the compass</description>
	  <type>boolean</type>
	</variable>
	<variable name="ne">
	  <alias>northeast</alias>
	  <description>whether north east compass quadrant is active</description>
	  <type>boolean</type>
	</variable>
	<variable name="nw">
	  <alias>northwest</alias>
	  <description>whether north west compass quadrant is active</description>
	  <type>boolean</type>
	</variable>
	<variable name="se">
	  <alias>southeast</alias>
	  <description>whether south east compass quadrant is active</description>
	  <type>boolean</type>
	</variable>
	<variable name="sw">
	  <alias>southwest</alias>
	  <description>whether south west compass quadrant is active</description>
	  <type>boolean</type>
	</variable>
	<variable name="x">
	  <description>beacon location</description>
	  <type>WU</type>
	</variable>
	<variable name="y">
	  <description>beacon location</description>
	  <type>WU</type>
	</variable>
      </subtable>
      <subtable name="crosshairs" classname="crosshairs">
	<variable name="active" access="local-player">
	  <description>whether crosshairs are visible</description>
	  <type>boolean</type>
	  <note>if you wish to stop the user from toggling the crosshairs, you must set the state every tick</note>
	</variable>
      </subtable>
      <function name="damage">
	<description>inflicts damage on player</description>
	<argument name="amount"><type>number</type></argument>
	<argument name="type" required="false">
	  <description>if unspecified, crush damage is delt</description>
	  <type>damage_type</type></argument>
      </function>
      <variable name="dead" access="read-only">
	<description>whether player is dead</description>
	<type>boolean</type>
      </variable>
      <variable name="deaths">
	<description>deaths not caused by players</description>
	<type>number</type>
      </variable>
      <variable name="direction">
	<alias>yaw</alias>
	<description>direction player is facing</description>
	<type>angle</type>
      </variable>
      <variable name="energy">
	<alias>life</alias>
	<description>amount of suit energy player has (150 is normal red health)</description>
	<type>number</type>
      </variable>
      <variable name="elevation">
	<alias>pitch</alias>
	<description>angle player is looking up or down</description>
	<type>angle</type>
      </variable>
      <subtable name="external_velocity" classname="external_velocity">
	<variable name="i">
	  <alias>x</alias>
	  <type>speed</type>
	</variable>
	<variable name="j">
	  <alias>y</alias>
	  <type>speed</type>
	</variable>
	<variable name="k">
	  <alias>z</alias>
	  <type>speed</type>
	</variable>
      </subtable>
      <variable name="extravision_duration">
	<description>extravision time remaining</description>
	<type>time</type>
      </variable>
      <variable name="feet_below_media" access="read-only">
	<description>whether player is standing in liquid</description>
	<type>boolean</type>
      </variable>
      <function name="fade_screen" access="local-player">
	<description>fades player's screen</description>
	<argument name="type"><type>fade_type</type></argument>
      </function>
      <function name="find_action_key_target" return="variant">
	<description>if player is in range of a platform or control panel, returns a platform or side; otherwise returns nil</description>
	<return><type>platform</type></return>
	<return><type>side</type></return>
	<return><type>nil</type></return>
	<note>you can check the type of the return with is_polygon() and is_side()</note>
      </function>
      <variable name="head_below_media" access="read-only">
	<description>whether player is completely below liquid</description>
	<type>boolean</type>
      </variable>
      <variable name="infravision_duration">
	<description>infravision time remaining</description>
	<type>time</type>
      </variable>
      <subtable name="internal_velocity" classname="internal_velocity">
	<variable name="forward" access="read-only">
	  <description>player's forward velocity</description>
	  <type>number</type>
	</variable>
	<variable name="perpendicular" access="read-only">
	  <description>player's perpendicular (sidestep) velocity</description>
	  <type>number</type>
	</variable>
      </subtable>
      <variable name="invincibility_duration">
	<description>invincibility time remaining</description>
	<type>time</type>
      </variable>
      <variable name="invisibility_duration">
	<description>invisibility time remaining</description>
	<type>time</type>
	<note>player will become subtly invisible if this is set higher than the standard invisibility duration (70 seconds)</note>
      </variable>
      <variable name="local_" access="read-only">
	<description>true if this player is the local player</description>
	<type>boolean</type>
	<note>normally, you shouldn't need this--you'll just make the game go out of sync</note>
      </variable>
      <function-variable name="kills">
	<description>kill count against slain_player</description>
	<argument name="slain_player"><type>player</type></argument>
	<type>number</type>
      </function-variable>
      <variable name="monster" access="read-only">
	<description>monster that corresponds to player</description>
	<type>monster</type>
      </variable>
      <variable name="motion_sensor_active" access="local-player">
	<description>whether player can view his motion sensor</description>
	<type>boolean</type>
	<note>currently, this also controls compass visibility</note>
      </variable>
      <variable name="name" access="read-only">
	<description>player's name</description>
	<type>string</type>
      </variable>
      <variable name="oxygen">
	<description>amount of oxygen player has (max is 10800)</description>
	<type>number</type>
      </variable>
      <subtable-accessor name="overlays" classname="overlays" index="n">
	<description>there are 6 overlays, numbered 0 through 5</description>
	<function name="clear" access="local-player">
	  <description>turns off overlay</description>
	</function>
	<variable name="color" access="write-only">
	  <description>text color</description>
	  <type>number</type>
	</variable>
	<function name="fill_icon" access="local-player">
	  <description>fills icon with solid color</description>
	  <argument name="color"><type>number</type></argument>
	</function>
	<variable name="icon" access="write-only">
	  <description>icon</description>
	  <type>icon</type>
	</variable>
	<variable name="text" access="write-only">
	  <description>text</description>
	  <type>string</type>
	</variable>
      </subtable-accessor>
      <function name="play_sound" access="local-player">
	<description>plays sound that only player can hear</description>
	<argument name="sound"><type>sound</type></argument>
	<argument name="pitch"><type>scale</type></argument>
      </function>
      <variable name="points">
	<description>how many points player has</description>
	<type>number</type>
      </variable>
      <variable name="polygon" access="read-only">
	<description>polygon the player is standing on</description>
	<type>polygon</type>
	<note>if this gives you trouble, try .monster.polygon</note>
      </variable>
      <function name="position">
	<description>set player position</description>
	<argument name="x"><type>WU</type></argument>
	<argument name="y"><type>WU</type></argument>
	<argument name="z"><type>WU</type></argument>
	<argument name="polygon"><type>polygon</type></argument>
      </function>
      <variable name="team">
	<description>player's team (pants color)</description>
	<type>number</type>
      </variable>
      <function name="teleport">
	<description>teleports player to polygon</description>
	<argument name="polygon"><type>WU</type></argument>
      </function>
      <function name="teleport_to_level">
	<description>teleports player to level (of course, all the other players will also go to that level)</description>
	<argument name="level"><type>number</type></argument>
      </function>
      <subtable-accessor name="weapons" classname="player_weapon" index="weapon_type">
	<subtable name="primary" classname="player_weapon_trigger">
	  <alias>secondary</alias>
	  <variable name="rounds" access="read-only">
	    <description>how many rounds are currently loaded into the weapon</description>
	    <type>number</type>
	  </variable>
	</subtable>
	<function name="select">
	  <description>attempts to force player to ready weapon</description>
	</function>
      </subtable-accessor>
      <variable name="weapons.current" access="read-only">
	<description>weapon the player is currently wielding</description>
	<type>player_weapon</type>
	<note>can be nil</note>
      </variable>
      <variable name="x" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="y" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="z" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="zoom_active" access="local-player">
	<description>whether player's sniper zoom is active</description>
	<type>boolean</type>
      </variable>
    </table>
    <table name="polygon">
      <subtable name="ceiling" classname="polygon_ceiling">
	<variable name="height">
	  <alias>z</alias>
	  <description>ceiling height</description>
	  <type>WU</type>
	</variable>
      </subtable>
      <subtable name="floor" classname="polygon_floor">
	<variable name="height">
	  <alias>z</alias>
	  <description>floor height</description>
	  <type>WU</type>
	</variable>
      </subtable>
      <variable name="media">
	<description>polygon media (liquid)</description>
	<type>media</type>
      </variable>
      <function name="monsters">
	<description>iterates through all monsters in this polygon (including player monsters)</description>
      </function>
      <variable name="permutation">
	<description>raw permutation index of this polygon</description>
	<type>number</type>
      </variable>
      <variable name="type">
	<description>polygon type</description>
	<type>polygon_type</type>
      </variable>
      <variable name="x" access="read-only">
	<description>center of polygon</description>
	<type>WU</type>
      </variable>
      <variable name="y" access="read-only">
	<description>center of polygon</description>
	<type>WU</type>
      </variable>
      <variable name="z" access="read-only">
	<description>shortcut for .floor.height</description>
	<type>WU</type>
      </variable>
    </table>
    <table name="projectile">
      <variable name="damage_scale">
	<description>amount to scale projectile's normal damage by upon detonating</description>
	<type>scale</type>
      </variable>
      <variable name="dz">
	<description>instantaneous downward velocity</description>
	<type>speed</type>
      </variable>
      <variable name="elevation">
	<alias>pitch</alias>
	<description>vertical angle</description>
	<type>angle</type>
      </variable>
      <variable name="facing">
	<alias>yaw</alias>
	<description>direction</description>
	<type>angle</type>
      </variable>
      <function name="position">
	<description>sets projectile position</description>
	<argument name="x"><type>WU</type></argument>
	<argument name="y"><type>WU</type></argument>
	<argument name="z"><type>WU</type></argument>
	<argument name="polygon"><type>polygon</type></argument>
      </function>
      <variable name="owner">
	<description>monster that fired projectile, or nil</description>
	<type>monster</type>
      </variable>
      <variable name="polygon" access="read-only">
	<description>polygon the projectile is in</description>
	<type>polygon</type>
      </variable>
      <variable name="type" access="read-only">
	<description>type of projectile</description>
	<type>projectile_type</type>
      </variable>
      <variable name="x" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="y" access="read-only">
	<type>WU</type>
      </variable>
      <variable name="z" access="read-only">
	<type>WU</type>
      </variable>
    </table>
    <table name="scenery">
      <function name="damage">
	<description>damages scenery</description>
      </function>
      <variable name="damaged" access="read-only">
	<description>whether this scenery has been damaged</description>
	<type>boolean</type>
      </variable>
      <function name="delete">
	<description>removes scenery from the map</description>
      </function>
      <variable name="facing">
	<description>direction scenery is facing</description>
	<type>angle</type>
      </variable>
      <variable name="polygon" access="read-only">
	<description>polygon the scenery is in</description>
	<type>polygon</type>
      </variable>
      <variable name="solid">
	<description>whether this scenery is solid</description>
	<type>boolean</type>
      </variable>
      <variable name="type" access="read-only">
	<description>type of scenery</description>
	<type>scenery_type</type>
      </variable>
      <variable name="x">
	<type>WU</type>
      </variable>
      <variable name="y">
	<type>WU</type>
      </variable>
      <variable name="z">
	<type>WU</type>
      </variable>
    </table>
    <table name="side">
      <subtable name="control_panel" classname="side_control_panel">
	<variable name="type" access="read-only">
	  <description>type of control panel</description>
	  <type>control_panel_type</type>
	</variable>
	<variable name="permutation">
	  <description>permutation of control panel</description>
	  <type>number</type>
	</variable>
	<note>nil if the side is not a control panel</note>
      </subtable>
      <variable name="line" access="read-only">
	<description>line this side is attached to</description>
	<type>line</type>
      </variable>
      <variable name="polygon" access="read-only">
	<description>polygon this side is attached to</description>
	<type>polygon</type>
      </variable>
    </table>
    <table name="tag">
      <variable name="active">
	<description>tag is active</description>
	<type>boolean</type>
      </variable>
    </table>
    <table name="terminal">
    </table>
    <accessor name="Annotations" contains="annotation">
      <length>
	<description>number of map annotations</description>
      </length>
      <index />
      <call>
	<description>iterates through all annotations</description>
      </call>
      <function name="new">
	<description>returns a new annotation</description>
	<argument name="polygon"><type>polygon</type></argument>
	<argument name="text"><type>string</type></argument>
	<argument name="x" required="false"><type>WU</type></argument>
	<argument name="y" required="false"><type>WU</type></argument>
      </function>
    </accessor>
    <accessor name="Cameras" contains="camera">
      <length>
	<description>number of cameras</description>
      </length>
      <index/>
      <call>
	<description>iterates through all cameras</description>
      </call>
    </accessor>
    <accessor name="Game" contains="game"/>
    <accessor name="Items" contains="item">
      <length>
	<description>maximum number of map objects</description>
      </length>
      <index/>
      <call>
	<description>iterates through all valid items</description>
      </call>
      <function name="new">
	<description>returns a new item</description>
	<argument name="x"><type>WU</type></argument>
	<argument name="y"><type>WU</type></argument>
	<argument name="height"><type>WU</type></argument>
	<argument name="polygon"><type>polygon</type></argument>
	<argument name="type"><type>item_type</type></argument>
	<return><type>item</type></return>
      </function>
    </accessor>
    <accessor name="Level" contains="level">
    </accessor>
    <accessor name="Lines" contains="line">
      <length>
	<description>number of lines in level</description>
      </length>
      <index/>
      <call>
	<description>iterates through all lines in the level</description>
      </call>
    </accessor>
    <accessor name="Lights" contains="light">
      <length>
	<description>number of lights in level</description>
      </length>
      <index />
      <call>
	<description>iterates through all lights in the level</description>
      </call>
    </accessor>
    <accessor name="Media" contains="media">
      <length>
	<description>number of media (liquids) on the level</description>
      </length>
      <index />
      <call>
	<description>iterates through all media on the level</description>
      </call>
    </accessor>
    <accessor name="Monsters" contains="monster">
      <length>
	<description>maximum number of monsters</description>
      </length>
      <index/>
      <call>
	<description>iterates through all valid monsters (including player monsters)</description>
      </call>
      <function name="new">
	<description>returns a new monster</description>
	<argument name="x"><type>WU</type></argument>
	<argument name="y"><type>WU</type></argument>
	<argument name="height"><type>WU</type></argument>
	<argument name="polygon"><type>polygon</type></argument>
	<argument name="type"><type>monster_type</type></argument>
	<return><type>monster</type></return>
      </function>
    </accessor>
    <accessor name="Music" contains="music"/>
    <accessor name="Platforms" contains="platform">
      <length>
	<description>number of platforms on the level</description>
      </length>
      <index/>
      <call>
	<description>iterates through all platforms in the level</description>
      </call>
    </accessor>
    <accessor name="Players" contains="player">
      <length>
	<description>number of players in the game</description>
      </length>
      <index/>
      <call>
	<description>iterates through all players in the game</description>
      </call>
    </accessor>
    <accessor name="Polygons" contains="polygon">
      <length>
	<description>number of polygons in the level</description>
      </length>
      <index/>
      <call>
	<description>iterates through all polygons in the level</description>
      </call>
    </accessor>
    <accessor name="Projectiles" contains="projectile">
      <length>
	<description>maximum number of projectiles</description>
      </length>
      <index/>
      <call>
	<description>iterates through all valid projectiles</description>
      </call>
      <function name="new">
	<description>returns a new projectile</description>
	<argument name="x"><type>WU</type></argument>
	<argument name="y"><type>WU</type></argument>
	<argument name="z"><type>WU</type></argument>
	<argument name="polygon"><type>polygon</type></argument>
	<argument name="type"><type>projectile_type</type></argument>
	<note>remember to set the projectile's elevation, facing and owner immediately after you've created it</note>
      </function>
    </accessor>
    <accessor name="Scenery" contains="scenery">
      <length>
	<description>maximum number of map objects</description>
      </length>
      <index/>
      <call>
	<description>iterates through all valid scenery</description>
      </call>
      <function name="new">
	<description>returns a new scenery</description>
	<argument name="x"><type>WU</type></argument>
	<argument name="y"><type>WU</type></argument>
	<argument name="height"><type>WU</type></argument>
	<argument name="polygon"><type>polygon</type></argument>
	<argument name="type"><type>scenery_type</type></argument>
	<return><type>scenery</type></return>
      </function>
    </accessor>
    <accessor name="Sides" contains="side">
      <length>
	<description>number of sides on the level</description>
      </length>
      <index/>
      <call>
	<description>iterates through all sides on the level</description>
      </call>
    </accessor>
    <accessor name="Tags" contains="tag">
      <index/>
    </accessor>
    <accessor name="Terminals" contains="terminal">
      <length>
	<description>number of terminal texts in the level</description>
      </length>
      <index/>
      <call>
	<description>iterates through all terminal texts on the level</description>
      </call>
    </accessor>
    <enum name="control_panel_class"/>
    <enum name="control_panel_type">
      <variable name="class" access="read-only">
	<description>class of this control panel type</description>
	<type>control_panel_class</type>
      </variable>
    </enum>
    <enum name="damage_type"/>
    <enum name="difficulty_type"/>
    <enum name="fade_type"/>
    <enum name="item_type"/>
    <enum name="media_type"/>
    <enum name="monster_class"/>
    <enum name="monster_type">
      <variable name="class">
	<description>class of monster type</description>
	<type>monster_class</type>
      </variable>
      <function-variable name="enemies" classname="monster_type_enemies">
	<description>whether monster class is an emeny</description>
	<argument name="monster_class"><type>monster_class</type></argument>
	<type>boolean</type>
      </function-variable>
      <function-variable name="friends" classname="monster_type_friends">
	<description>whether monster class is a friend</description>
	<argument name="monster_class"><type>monster_class</type></argument>
	<type>boolean</type>
      </function-variable>
      <function-variable name="immunities" classname="monster_type_immunities">
	<description>whether monster type is immune to damage type</description>
	<argument name="damage_type"><type>damage_type</type></argument>
	<type>boolean</type>
      </function-variable>
      <variable name="item">
	<description>item the monster drops when it dies</description>
	<type>item_type</type>
      </variable>
      <function-variable name="weaknesses" classname="monster_type_weaknesses">
	<description>whether monster type has a weakness to damage type</description>
	<argument name="damage type"><type>damage_type</type></argument>
	<type>boolean</type>
      </function-variable>
    </enum>
    <enum name="projectile_type"/>
    <enum name="scenery_type"/>
    <enum name="weapon_type"/>
    <enum-accessor name="ControlPanelClasses" contains="control_panel_class"/>
    <enum-accessor name="ControlPanelTypes" contains="control_panel_type"/>
    <enum-accessor name="DamageTypes" contains="damage_type"/>
    <enum-accessor name="DifficultyTypes" contains="difficulty_type"/>
    <enum-accessor name="FadeTypes" contains="fade_type"/>
    <enum-accessor name="ItemTypes" contains="item_type"/>
    <enum-accessor name="MediaTypes" contains="media_type"/>
    <enum-accessor name="MonsterClasses" contains="monster_class"/>
    <enum-accessor name="MonsterTypes" contains="monster_type"/>
    <enum-accessor name="ProjectileTypes" contains="projectile_type"/>
    <enum-accessor name="SceneryTypes" contains="scenery_type"/>
    <enum-accessor name="WeaponTypes" contains="weapon_type"/>
  </tables>
  <section name="Example Icon" id="example_icon">
    <description>
      <pre>
--[[
This is  an example  of an  icon  in  the format  used by  Aleph One's  overlay
functions.
The first characters  are a digit string  describing the number of  colors. (in
this example, it's 7.
The first character that  is not a digit is ignored,  as are all the characters
following it  that are the same  character. (i.e. I  could use a q instead of a
newline here.
Then,  for  every color,  it reads  a character,  followed by  a six-digit  hex
string,  which is the  HTML-style color corresponding  to that character in the
image.  After reading this string,  it ignores the next character,  whatever it
is.
Once it has  read every color,  it reads all the following characters,  and for
every character it reads for which a color has defined, it puts that color into
the icon as the next pixel. Other characters are ignored. (see below.)
Icons are always 16x16.
]]

[[
7
 0000FF
#000000
.FFFFFF
$7FAE20
%EBD52A
,45983C
*5B4714
*************# The fact
*************# that it
*$$$#*********# ignores
$$$$$#********# characters
$$$$$#$$******# that
$$##$##$$*****# are
$$$$##.#$$#**# not colors
$%%$$#.,#$#**# can be
%%%%%%##,#$$# exploited to interesting
%%%%%%%##$$# effect by a sufficiently
#%%%%%%%$$$$# resourceful and obnoxious
*##%%%%%%$$$$###
#**#%%#%%%###**#
*#*##%%#%%$$$$# person
**#  #%%##%$$# such as
**#   #%%%#%$# myself :)
Additionally, once it has read 256 valid characters, it ignores the rest of the
string.
]]
      </pre>
    </description>
  </section>
</document>
