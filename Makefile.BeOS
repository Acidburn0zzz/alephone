## BeOS Generic Makefile v2.2 ##

## Fill in this file to specify the project being created, and the referenced
## makefile-engine will do all of the hard work for you.  This handles both
## Intel and PowerPC builds of the BeOS.

## Application Specific Settings ---------------------------------------------

# specify the name of the binary
NAME=alephone

# specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
TYPE=APP

#	add support for new Pe and Eddie features
#	to fill in generic makefile

#%{
# @src->@ 

#	specify the source files to use
#	full paths or paths relative to the makefile can be included
# 	all files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this makefile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.  Also note that spaces
#	in folder names do not work well with this makefile.
CS=Source_Files/CSeries
EP=Source_Files/Expat
MI=Source_Files/Misc
NW=Source_Files/Network
PF=Source_Files/Pfhortran
SRCS=\
  $(CS)/byte_swapping.cpp $(CS)/csalerts_sdl.cpp $(CS)/cscluts_sdl.cpp \
  $(CS)/csdialogs_sdl.cpp $(CS)/csfiles_beos.cpp $(CS)/csmisc_sdl.cpp \
  $(CS)/csstrings_sdl.cpp \
  \
  $(EP)/hashtable.c $(EP)/xmlparse.c $(EP)/xmlrole.c $(EP)/xmltok.c \
  \
  $(MI)/AnimatedTextures.cpp $(MI)/ChaseCam.cpp $(MI)/ColorParser.cpp \
  $(MI)/Crosshairs_SDL.cpp $(MI)/DamageParser.cpp $(MI)/FileHandler_SDL.cpp \
  $(MI)/OGL_Setup.cpp $(MI)/OverheadMap_SDL.cpp $(MI)/OverheadMapRenderer.cpp \
  $(MI)/PlayerName.cpp $(MI)/RenderPlaceObjs.cpp $(MI)/RenderRasterize.cpp \
  $(MI)/RenderSortPoly.cpp $(MI)/RenderVisTree.cpp $(MI)/ShapesParser.cpp \
  $(MI)/TextStrings.cpp $(MI)/ViewControl.cpp $(MI)/XML_Configure.cpp \
  $(MI)/XML_ElementParser.cpp $(MI)/XML_MakeRoot.cpp $(MI)/XML_Loader_SDL.cpp \
  $(MI)/computer_interface.cpp $(MI)/crc.cpp $(MI)/devices.cpp \
  $(MI)/dynamic_limits.cpp $(MI)/effects.cpp $(MI)/fades.cpp \
  $(MI)/flood_map.cpp $(MI)/game_errors.cpp $(MI)/game_wad.cpp \
  $(MI)/game_window.cpp $(MI)/game_window_sdl.cpp $(MI)/images.cpp \
  $(MI)/import_definitions.cpp $(MI)/interface.cpp $(MI)/interface_sdl.cpp \
  $(MI)/items.cpp $(MI)/lightsource.cpp $(MI)/map.cpp \
  $(MI)/map_constructors.cpp $(MI)/marathon2.cpp $(MI)/media.cpp \
  $(MI)/monsters.cpp $(MI)/motion_sensor.cpp $(MI)/mouse_sdl.cpp \
  $(MI)/mysound.cpp $(MI)/overhead_map.cpp $(MI)/pathfinding.cpp \
  $(MI)/physics.cpp $(MI)/placement.cpp $(MI)/platforms.cpp $(MI)/player.cpp \
  $(MI)/preferences.cpp $(MI)/preprocess_map_sdl.cpp $(MI)/projectiles.cpp \
  $(MI)/render.cpp $(MI)/resource_manager.cpp $(MI)/scenery.cpp \
  $(MI)/scottish_textures.cpp $(MI)/screen_drawing_sdl.cpp \
  $(MI)/screen_sdl.cpp $(MI)/sdl_dialogs.cpp $(MI)/sdl_widgets.cpp \
  $(MI)/shapes.cpp $(MI)/shell.cpp $(MI)/textures.cpp $(MI)/vbl.cpp \
  $(MI)/vbl_sdl.cpp $(MI)/wad.cpp $(MI)/wad_sdl.cpp $(MI)/wad_prefs.cpp \
  $(MI)/weapons.cpp $(MI)/world.cpp \
  \
  $(NW)/network_dummy.cpp $(NW)/network_games.cpp \
  \
  $(PF)/script_instructions.cpp $(PF)/script_parser.cpp $(PF)/scripting.cpp

#	specify the resource files to use
#	full path or a relative path to the resource file can be used.
RSRCS= 

# @<-src@ 
#%}

#	end support for Pe and Eddie

#	specify additional libraries to link against
#	there are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS=be stdc++.r4 SDL

#	specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the makefile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS=

#	additional paths to look for system headers
#	thes use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS=

#	additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS= 

#	specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE= 

#	specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES= SDL HAVE_UNISTD_H VERSION=\"0.10\"

#	specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS = 

#	specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS = 

#	specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER = 

#	specify additional compiler flags for all files
COMPILER_FLAGS = `sdl-config --cflags`

#	specify additional linker flags
LINKER_FLAGS = `sdl-config --libs`

#	specify the version of this particular item
#	(for example, -app 3 4 0 d 0 -short 340 -long "340 "`echo -n -e '\302\251'`"1999 GNU GPL") 
#	This may also be specified in a resource.
APP_VERSION = 

#	(for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH = 

## include the makefile-engine
include $(BUILDHOME)/etc/makefile-engine

# Install under BeOS
install: $(TARGET)
	@if [ x$(prefix) == x ]; then \
	  dest=/boot/home/AlephOne; \
	else \
	  dest=$(prefix)/AlephOne; \
	fi; \
	./mkinstalldirs $$dest; \
	./mkinstalldirs $$dest/MML; \
	cp $(TARGET) $$dest/AlephOne; \
	cp data/Resources $$dest; \
	cp data/Fonts $$dest; \
	cp data/Pfhortran_Language_Definition $$dest; \
	cp data/*.mml $$dest/MML; \
	mimeset -f $$dest
