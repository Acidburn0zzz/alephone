## BeOS Generic Makefile v2.2 ##

## Fill in this file to specify the project being created, and the referenced
## makefile-engine will do all of the hard work for you.  This handles both
## Intel and PowerPC builds of the BeOS.

## Application Specific Settings ---------------------------------------------

# specify the name of the binary
NAME=alephone

# specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
TYPE=APP

#	add support for new Pe and Eddie features
#	to fill in generic makefile

#%{
# @src->@ 

#	specify the source files to use
#	full paths or paths relative to the makefile can be included
# 	all files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this makefile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.  Also note that spaces
#	in folder names do not work well with this makefile.
SRCS=\
  CSeries/byte_swapping.cpp CSeries/csalerts_sdl.cpp CSeries/cscluts_sdl.cpp \
  CSeries/csdialogs_sdl.cpp CSeries/csmisc_sdl.cpp CSeries/csstrings_sdl.cpp \
  \
  Expat/hashtable.c Expat/xmlparse.c Expat/xmlrole.c Expat/xmltok.c \
  \
  Misc/AnimatedTextures.cpp Misc/ChaseCam.cpp Misc/ColorParser.cpp \
  Misc/Crosshairs_SDL.cpp Misc/DamageParser.cpp Misc/FileHandler_SDL.cpp \
  Misc/OGL_Setup.cpp Misc/OverheadMap_SDL.cpp Misc/OverheadMapRenderer.cpp \
  Misc/PlayerName.cpp Misc/RenderPlaceObjs.cpp Misc/RenderRasterize.cpp \
  Misc/RenderSortPoly.cpp Misc/RenderVisTree.cpp Misc/ShapesParser.cpp \
  Misc/TextStrings.cpp Misc/ViewControl.cpp Misc/XML_Configure.cpp \
  Misc/XML_ElementParser.cpp Misc/XML_MakeRoot.cpp Misc/XML_Resources_SDL.cpp \
  Misc/computer_interface.cpp Misc/crc.cpp Misc/devices.cpp \
  Misc/dynamic_limits.cpp Misc/effects.cpp Misc/fades.cpp \
  Misc/filetypes_sdl.cpp Misc/flood_map.cpp Misc/game_errors.cpp \
  Misc/game_wad.cpp Misc/game_window.cpp Misc/game_window_sdl.cpp \
  Misc/images.cpp Misc/import_definitions.cpp Misc/interface.cpp \
  Misc/interface_sdl.cpp Misc/items.cpp Misc/lightsource.cpp Misc/map.cpp \
  Misc/map_constructors.cpp Misc/marathon2.cpp Misc/media.cpp Misc/monsters.cpp \
  Misc/motion_sensor.cpp Misc/music_sdl.cpp Misc/mysound.cpp \
  Misc/overhead_map.cpp Misc/pathfinding.cpp Misc/physics.cpp \
  Misc/placement.cpp Misc/platforms.cpp Misc/player.cpp Misc/preferences.cpp \
  Misc/preprocess_map_sdl.cpp Misc/projectiles.cpp Misc/render.cpp \
  Misc/resource_manager.cpp Misc/scenery.cpp Misc/scottish_textures.cpp \
  Misc/screen_drawing_sdl.cpp Misc/screen_sdl.cpp Misc/shapes.cpp \
  Misc/shell_sdl.cpp Misc/shell_beos.cpp Misc/textures.cpp Misc/vbl.cpp \
  Misc/vbl_sdl.cpp Misc/wad.cpp Misc/wad_sdl.cpp Misc/wad_prefs.cpp \
  Misc/wad_prefs_sdl.cpp Misc/weapons.cpp Misc/world.cpp \
  \
  Network/network_dummy.cpp Network/network_games.cpp \
  \
  Pfhortran/script_instructions.cpp Pfhortran/script_parser.cpp \
  Pfhortran/scripting.cpp


#	specify the resource files to use
#	full path or a relative path to the resource file can be used.
RSRCS= 

# @<-src@ 
#%}

#	end support for Pe and Eddie

#	specify additional libraries to link against
#	there are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS=be stdc++.r4 SDL

#	specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the makefile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS=

#	additional paths to look for system headers
#	thes use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS=

#	additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS= 

#	specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE= 

#	specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES= SDL HAVE_UNISTD_H VERSION=\"0.10\"

#	specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS = 

#	specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS = 

#	specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER = 

#	specify additional compiler flags for all files
COMPILER_FLAGS = `sdl-config --cflags`

#	specify additional linker flags
LINKER_FLAGS = `sdl-config --libs`

#	specify the version of this particular item
#	(for example, -app 3 4 0 d 0 -short 340 -long "340 "`echo -n -e '\302\251'`"1999 GNU GPL") 
#	This may also be specified in a resource.
APP_VERSION = 

#	(for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH = 

## include the makefile-engine
include $(BUILDHOME)/etc/makefile-engine

# Install under BeOS
install: $(TARGET)
	@if [ x$(prefix) == x ]; then \
	  dest=/boot/home/AlephOne; \
	else \
	  dest=$(prefix)/AlephOne; \
	fi; \
	mkinstalldirs $$dest; \
	cp $(TARGET) $$dest/AlephOne; \
	cp data/Resources $$dest; \
	cp data/Fonts $$dest; \
	cp data/Pfhortran_Language_Definition $$dest; \
	mimeset -f $$dest
