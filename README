Aleph One/SDL README file
=========================


LICENSE
-------

Aleph One is available under the terms of the GNU General Public License.
See the file "COPYING" that is included in the distribution for details.


SYSTEM REQUIREMENTS
-------------------

Aleph One/SDL has so far only been developed and tested on Linux/i386,
FreeBSD 4.x/i386 and BeOS/x86 R5. It may not work on other operating systems
or on architectures other than i386, PowerPC and 680x0 because there are
still some portablilty problems with the code (mainly data alignment
problems and assumptions that sizeof(long) = sizeof(void *) = 4, which are
not yet completely removed). You are, however, invited to test or fix it to
run on other systems.


PREREQUISITES
-------------

Aleph One/SDL requires the Simple DirectMedia (SDL) library, available from
the official SDL site:

  http://www.libsdl.org/

Note that if you didn't install SDL from source, you also have to install the
"SDL-devel" package.


INSTALLATION
------------

Unix:
  As with any autoconfiguring GNU software, installation is as easy as this:

   $ ./configure
   $ make
   [become root]
   # make install

  For a complete list of options that the "configure" script takes, type

   $ ./configure --help

  The most important option is

   --prefix=PREFIX

  which you can use to specify a different installation directory (the default
  is /usr/local). The Aleph One executable will be installed in PREFIX/bin, and
  the data files in PREFIX/share/AlephOne.

  If you don't have hardware accelerated OpenGL, you may want to specify the
  "--disable-opengl" option to the configure script.

BeOS:
  Under BeOS, you don't run the "configure" script. Instead, there is a
  special Makefile for compiling. Install Aleph One as follows:

   $ make -f Makefile.BeOS install

  This will create a new directory "AlephOne" in your "home" directory that
  contains the "AlephOne" application, the "Fonts", "Resources" and
  "Pfhortran_Language_Definition" data files, and an "MML" directory. You
  can move the "AlephOne" directory anywhere you like as long as the
  application is kept together with the data files.

To play Aleph One, you will also need Marathon graphics, sound and map
files. Unfortunately, Bungie has not released these files to the public, so
you must own a copy of Marathon Infinity or the Marathon Infinity Demo
(although Aleph One was originally based on Marathon 2, it was extended to
use the Marathon Infinity data files; you can play the Marathon 2 scenario,
but you will still need Infinity data files, see below). The Demo is freely
available, but in Mac format, so I've created an archive containing the
necessary data files from the Marathon Infinity Demo, converted to the
formats needed by the SDL version of Aleph One. Download this archive from
my Aleph One/SDL page:

  http://www.uni-mainz.de/~bauec002/A1Main.html

The archive contains the files "Images", "Map", "Map.resources", "Shapes",
"Sounds" and "README". This archive has to be unpacked to

Unix:
  /usr/local/share/AlephOne  (unless you specified a different PREFIX above)

BeOS:
  The same directory as the "AlephOne" application.

If you have a Marathon Infinity or Marathon Trilogy Box Set CD, you can copy
the needed files from the CD. This is a bit complicated, however, due to some
ideosyncracies of the Mac HFS file system (every Mac file is really two files,
one "data fork" and one "resource fork"). Aleph One/SDL needs these files:

 "Images" (resource fork)
 "Map" (data fork)
 "Map.resources" (resource fork of "Map" file)
 "Music" (data fork, optional, not included in Demo)
 "Shapes" (data fork)
 "Sounds" (data fork)

Aleph One also needs the files "Fonts" and "Pfhortran_Language_Definition"
and "Resources", but these are included with the Aleph One/SDL distribution
and installed by "make install". Here's how to copy these files from an
Infinity/Trilogy CD under Linux:

 1. Mount the CD with the HFS file system (you will probably have to be
    root to do this):

     # mount -t hfs /dev/cdrom /mnt/cdrom

    If you mount CDs on a different mount point, such as "/cdrom", use that
    instead of "/mnt/cdrom".

 2. Change to the right directory on the CD. This can be complicated because
    of the Mac special characters in the directory names, but with TAB-
    completion or copying and pasting you will succeed.

     $ cd /mnt/cdrom/....

    You should now be in a directory containing the above mentioned files.

 3. The Linux HFS file system module has the useful property of handling
    Mac data and resource forks and making them available as separate files
    (the resource forks are in a hidden ".resource" directory). You can
    now copy the files:

     $ cp .resource/Images /usr/local/share/AlephOne/Images
     $ cp Map /usr/local/share/AlephOne/Map
     $ cp .resource/Map /usr/local/share/AlephOne/Map.resources
     $ cp Music /usr/local/share/AlephOne/Music
     $ cp Shapes /usr/local/share/AlephOne/Shapes
     $ cp Sounds /usr/local/share/AlephOne/Sounds

    That's it.

Playing Marathon 2:

It is possible to play the Marathon 2 scenario by copying the data files from
a Marathon 2 CD in the same way as described above, but you need to replace
the "Shapes" and "Sounds" files with their Infinity versions or the game will
not work (some textures will be wrong but the game will be playable).


PLAYING ALEPH ONE
-----------------

Unix:
  To start Aleph One, type

   $ alephone

BeOS:
  To start Aleph One, double click the "AlephOne" application icon. If you want
  to specify arguments or see error messages, you will have to start it from the
  shell, however.

The program can take a number of command line arguments. Here is a complete
list:

  [-h | --help]          Display the help message
  [-v | --version]       Display the game version
  [-f | --fullscreen]    Run the game fullscreen
  [-g | --nogl]          Do not use OpenGL
  [-s | --nosound]       Do not access the sound card

If Aleph One complains about missing data files, and you are sure that you
have installed them, try setting the ALEPHONE_DATA environment variable to
the path of the data file directory. You can also use this to switch between
different scenarios, but you will have to delete the preferences file

Unix:
  ~/.alephone/Aleph One Preferences

BeOS:
  /boot/home/config/settings/Aleph One/Aleph One Preferences

if you do so.

The background story of the game and the keyboard controls are explained in
the manual or README file on your Marathon CD or in the Demo archive.
Here is a rundown of the default keyboard configuration (assuming a US
keyboard; all keys are mapped by position):

  On the menu screen:
    N - Begin new game
    O - Continue saved game
    P - Preferences
    R - Replay saved film
    C - Show game credits
    Q - Quit

  In-game:
    KP8     - Walk forward
    KP5     - Walk backward
    KP4     - Turn left
    KP6     - Turn right

    Z       - Sidestep left
    X       - Sidestep right

    D       - Look up
    C       - Look down
    V       - Look ahead

    A       - Glance left
    S       - Glance right

    Left mouse button/
    Space   - Fire weapon, primary trigger
    Right mouse button/
    Alt     - Fire weapon, secondary trigger (e.g. grenades)
    KP7     - Select previous weapon
    KP9     - Select next weapon

    Tab     - Action (open doors, flip switches, log in to computer terminals)

    Shift   - Sidestep
    Ctrl    - Walk slowly/swim
    Meta    - Keyboard look

    M       - Overhead map

  Other keys (not configurable):
    -       - Zoom overhead map out
    =       - Zoom overhead map in

    \       - Toggle FPS display

    Alt-Q   - Quit game
    Alt-P   - Pause game (press Alt-P again to resume)

    F1      - Decrease screen size
    F2      - Increase screen size
    F4      - Reset OpenGL textures
    F5      - Make the chase cam switch sides
    F6      - Toggle chase cam
    F7      - Toggle tunnel vision
    F8      - Toggle crosshairs
    F9      - Screen dump (saved in ~/.alephone/Screenshot_*.bmp files)
    F10     - Toggle position display
    F11     - Decrease gamma level (8-bit mode only)
    F12     - Increase gamma level (8-bit mode only)

    ,       - Decrease sound volume
    .       - Increase sound volume
    [ and ] - Scroll player inventory view

    Backspace - Switch player view in replays
    [ and ] - Adjust film replay speed


PLAYING THIRD-PARTY MAPS WITH ALEPH ONE
---------------------------------------

(If the following instructions are too technical for you, see the "Map
installation for dummies" section, below)

Aleph One can be extended with custom map, shape and sound files which
can be selected in the "Environment" section of the preferences menu.
Aleph One/SDL looks for these files in two places:

Unix:
  /usr/local/share/AlephOne
 and
  ~/.alephone

BeOS:
  The Aleph One application directory
 and
  /boot/home/config/settings/Aleph One

Aleph One looks in both of these directories (and in all subdirectories)
for map, shape and sound files it recognizes and shows a list of them in
the "Environment" preferences menu when clicking on one of the "Map",
"Shapes" or "Sounds" items. So, for example, under Unix you could create
a directory ~/.alephone/maps and place all map files you downloaded in
there.

Most 3rd-party maps for Marathon 2 and Marathon Infinity you can find on the
internet, for example in the Marathon HyperArchive

  http://www.marathon.org/hyperarchive/

do in principle work out-of-the box with Aleph One/SDL. I said "in principle",
because these maps are usually stored in BinHex (.hqx) and/or StuffIt (.sit)
format, which is difficult to unpack on non-Mac systems.

Fortunately, for Linux there is a beta version of "StuffIt Expander" which
can handle such files:

  http://www.aladdinsys.com/expander/expander_linux.html

(when unpacking a ".sit.hqx" archive, you will need to run "unstuff" twice,
first for de-BinHexing and a second time for unstuffing).

The other problem with Marathon map files is that terminal pictures,
chapter screens and chapter screen sounds are stored in the resource fork
on the Mac. If a map doesn't have a resource fork with these things (most
Net maps don't), it is sufficient to just copy the entire map file over
to a place where Aleph One can find it (see above).

If the map does have a resource fork (most single-player maps do), you
have three options:
 - Extract the data and resource forks into separate files, as I did with
   the Infinity map in the installation instructions above. If the file
   containing the data fork has the name "foo", the resource file must be
   called "foo.rsrc" or "foo.resource" and kept in the same directory as
   the data file. Splitting files into data and resource forks is easy
   to do when copying unpacked files from Mac CD-ROMs (see above) or when
   unpacking downloaded map files under MacOS with my Basilisk II Mac
   emulator (copy the unpacked map to the external file system where the
   resource fork will be stored in a ".rsrc" directory).
 - Convert the dual-forked Mac map file into a single "AppleSingle" encoded
   file. This is the preferred option because it will combine the data and
   resource forks into a single file which is easier to move around than
   two separate files. The "tools" directory of the Aleph One/SDL source
   archive contains two utilities for handling AppleSingle files.
 - Convert the dual-forked Mac map file into a single "MacBinary II" encoded
   file. This will also leave you with a single map file. The Linux "unstuff"
   program will produce MacBinary files when giving it the "-m=auto" option.

The shape and sound files don't require special treatment to work under
Aleph One/SDL. Some shape files, however, come in the form of a "patcher"
application that only runs under MacOS. Such files cannot be used with
Aleph One/SDL.


MAP INSTALLATION FOR DUMMIES UNDER LINUX
----------------------------------------

First, download and install the "StuffIt Expander" beta for Linux:

  http://www.aladdinsys.com/expander/expander_linux.html

Now, suppose that you downloaded a file "CoolMap.sit.hqx" which contains
a Marathon 2 or Infinity map.

1. De-BinHex the file:

     $ ls
     CoolMap.sit.hqx
     $ unstuff CoolMap.sit.hqx
     Scanning CoolMap.sit.hqx
     Expanding CoolMap.sit.hqx
     /home/cbauer/downloads/CoolMap.sit ............
     done
     $ ls
     CoolMap.sit   CoolMap.sit.hqx

2. Unstuff the file:

     $ unstuff -m=auto CoolMap.sit
     Scanning CoolMap.sit
     Expanding CoolMap.sit
     /home/cbauer/downloads/Cool Map/Cool Map ............
     /home/cbauer/downloads/Cool Map/Read Me
     done
     $ ls
     'Cool Map'   CoolMap.sit  CoolMap.sit.hqx
     $ cd "Cool Map"
     $ ls
     'Cool Map'  'Read Me'

   The "Read Me" file may be unreadable but you can ignore it.

3. Copy the map file to the right place:

     $ cp "Cool Map" ~/.alephone

4. The map should now show up in the list when clicking on the "Map" item of
   the Environment preferences section of Aleph One.


FILMS AND SAVED GAMES
---------------------

Saved games and films are stored in

Unix:
  ~/.alephone/Saved Games
 and
  ~/.alephone/Recordings

BeOS:
  /boot/home/config/settings/Aleph One/Saved Games
 and
  /boot/home/config/settings/Aleph One/Recordings

If you want to restore games or replay films you have downloaded (or copied
from another computer), you have to copy them into these directories or
they won't show up when clicking on "Continue Saved Game" or "Replay Saved
Film" on the main menu.


FILE COMPATIBILITY
------------------

This section gives a summary of the cross-platform compatibility of the
various files used by Aleph One and the original Marathon games:

  "Images" - on Aleph One/SDL this is a data file and not a resource file
    as on the MacOS versions of Aleph One and Marathon, but the file format
    is exactly the same, and compatible across all platforms supported by
    Aleph One/SDL
  "Shapes" - fully compatible across all versions of Aleph One/Marathon Infinity
  "Sounds" - fully compatible across all versions of Aleph One/Marathon Infinity
  Map files - maps without resource forks are fully compatible across all
    versions of Aleph One/Marathon 2/Marathon Infinity; maps with resource
    forks need to be in one of three formats:
      - data and resource forks in separate files, such as "Map" and
        "Map.resources"
      - an AppleSingle encoded file containing data and resource fork
      - a MacBinary II encoded file containing data and resource fork
    All of these formats are fully compatible across all platforms supported
    by Aleph One/SDL.
  Saved games - fully compatible across all versions of Aleph One/
    Marathon 2/Marathon Infinity (but the MacOS versions save a small picture
    of the map at the current player's position in the resource fork of
    saved games, which is not preserved or used by Aleph One/SDL)
  Films - fully compatible across all versions of Aleph One/Marathon 2/
    Marathon Infinity
  "Aleph One Preferences" - platform-specific, not compatible with the MacOS
    versions of Aleph One/Marathon nor across the platforms supported by
    Aleph One/SDL


MARATHON MARKUP LANGUAGE
------------------------

The Marathon Markup Language (MML) is a subset of the Extensible Markup
Language (XML). MML scripts can be used to configure some aspects of
Aleph One. These scripts are stored in

Unix:
  /usr/local/share/AlephOne/MML
 and
  ~/.alephone/MML

BeOS:
  The "MML" directory in the Aleph One application directory
 and
  /boot/home/config/settings/Aleph One/MML

Upon startup, Aleph One reads and parses all scripts found in these
directories. For a description of their contents and what you can do by
writing your own MML scripts, please consult the file "docs/MML.html"
that comes in the Aleph One distribution archive.


MISSING FEATURES AND BUGS
-------------------------

The SDL version of Aleph One is a work in progress. Here is an (incomplete)
list of the missing features, listed in roughly the order I plan to implement
them:

 - Some preferences items are missing (sound volume, mouse sensitivity,
   OpenGL on/off, chase cam, crosshairs, OpenGL texture/landscape/fog
   options)
 - Text rendering under OpenGL (overhead map doesn't show level name and
   annotations)
 - Palette tricks (fading, underwater, red flash when being hit etc.) don't
   work with the software renderer (SDL 1.1.5 will support gamma tables)
 - Networking (the "Gather Network Game" and "Join Network Game" buttons on
   the title screen are nonfunctional)

And a list of known bugs:

 - Mouse control under BeOS doesn't work (SDL problem)
 - Lo-res mode (F3) doesn't work
 - Snapshots (F9) don't work when OpenGL is active
 - darken_world_window() doesn't work when OpenGL is active
 - OpenGL multitexturing crashes NVIDIA GLX 0.9-5, reason unknown
 - "Checkpoint" map displays in terminals don't show circle shapes
 - Some error messages are those of the Mac version, which are often
   inappropriate or misleading


TIPS
----

You can start the game at any level by holding the Shift and Control keys
while clicking on the "Begin New Game" button on the main menu.

To activate the cheat codes, see the file "docs/Cheat_Codes" that is included
in the Aleph One archive. But remember: Winners don't cheat and cheaters
don't usually win! :-)

If you're stuck in the game, there's an excellent walkthrough at

  http://pinky.wtower.com/marathon/


TROUBLESHOOTING
---------------

If Aleph One crashes or behaves strangely on startup, delete the file

Unix:
  ~/.alephone/Aleph One Preferences

BeOS:
  /boot/home/config/settings/Aleph One/Aleph One Preferences

and try again.

If the game runs very slowly, try running it in 8 bit mode. Using XFree86
4.0 instead of 3.x may also greatly increase the speed. If you don't have
hardware accelerated OpenGL, you should specify the "-g" argument to enable
software rendering (unless you configured Aleph One with the
"--disable-opengl" option).


SUPPORT
-------

Aleph One is not officially supported by Bungie Software, so don't bother
contacting them about it.

The official Aleph One home page is at

  http://source.bungie.org/

My home page for the SDL port is at

  http://www.uni-mainz.de/~bauec002/A1Main.html

If you have questions about Marathon in general, you should post them to
the established marathon forums, such as alt.games.marathon.


Happy carnage!
Christian Bauer <Christian.Bauer@uni-mainz.de>
